"""Домашка до понедельника (берём уже то, что вы сделали к последнему уроку):

1. Исправить все нюансы, которые были озвучены во время проверки домашки на последнем уроке.
2. Создать модуль exceptions, в нем класс ValidationError, который наследуется от Exception. 
   Никакие методы, свойства переопределять не нужно, необходимо только описать в docstring, что это класс ошибки валидации данных.
3. Создать модуль validator, в котором:
    i. Реализовать класс Data, конструктор которого принимает name и age аргументы, сохраняет их в одноименные переменные экземпляра класса. 
    Так же у этого класса должен быть метод _clear_whitespaces, который очищает от пробелов в начале и в конце переменные name и age у экземпляра класса. 
    Вызывать метод _clear_whitespaces необходимо из конструктора класса.
   ii. Реализовать класс DataWithDate, наследовавшись от класса Data. Конструктор должен делать то же самое, что и родительский класс, но дополнительно сохраняет текущее время, 
    когда был создан этот экземпляр класса ( см. datetime.utcnow).
  iii. Реализовать класс Validator. У класса Validator должны быть следующие методы:
        a.конструктор класса — в экземпляре класса создает переменную data_history, которая является пустым списком, но будет хранить объекты класса Data.
        b._validate_name — валидация имени (скопировать код из функции validate_name).
        c._validate_age — валидация возраста (скопировать код из функции validate_age).
        d.validate — принимает аргумент data (объект класса Data) и сохраняет в список data_history. Далее запускает методы валидации, описанные выше.
    При этом методы _validate_name и _validate_age должны брать имя и возраст из переменной Validator.data_history (самое последнее значение). А также выбрасывать исключения ValidationError вместо Exception. 
    Если переменная data_history пуста, тогда выбрасывать исключение ValueError.
4. В вашем основном файле, где вся текущая домашка:
    i. В самом верху необходимо импортировать класс Validator из модуля validator.
    ii. В самом верху необходимо импортировать класс ValidationError из модуля exceptions.    
    iii. В функции main до цикла создать объект класса. Вызвать метод validate вместо тех функций валидаций, которые были написаны в домашках ранее - эти функции необходимо удалить из этого файла. Обрабатывать ошибку ValidationError вместо Exception.
    iv. После того как пользователь ввел данные, необходимо создать объект класса DataWithDate и далее работать только с ним.
    v. Теперь количество попыток ввода данных должно выводиться только в том случае, если пользователь не смог с первого раза ввести верные данные.
    vi. После ввода верных данных и до запуска игры необходимо показать пользователю:
        a. Общее количество попыток
        b. Время первой попытки, время последней попытки
        c. Сколько времени понадобилось пользователю, чтобы от первой попытки дойти к последней (формат HH:MM:SS, где HH - часы, MM - минуты, SS - секунды)."""


from validator import Validator
from exceptions import ValidationError 
from validator import DataWithDate
from datetime import datetime
import random
  

# Создаем функцию для выдачи/замены паспорта
def get_passport_advice(age: int) -> str:
    """Функция выдачи/замены паспорта в зависимости от возраста"""

    if age == 16 or age == 17:
        return f"\nПолучите паспорт впервые!"

    elif age == 25 or age == 26:
        return f"\nЗамените паспорт впервые!"

    elif age == 45 or age == 46:
        return f"\nЗамените паспорт повторно!" 


def guess_number_game() -> str:
    """Функция 'Угадай число', где игроку будет предложено угадать число от 1 до 10.
       В зависимости от того что будет вводить пользователь, будет выводиться текст 
       и количество попыток потраченных на игру"""

    # Счетчик попыток в игре
    counter_game = 0
    game = random.randint(1, 10)
    
    print('Отлично, я загадал число от 1 и 10. Сможешь угадать?')
    #print(game)

    # Создаем цикл в котором будет выводиться сообщения в зависимости от введенных данных пользователя
    while True:

        guess = int(input("Введите целое число: "))

        if guess == game:
            print("Да ты Нострадамус! (◕ ‿ ◕)")
            print(f'Вы потратили {counter_game + 1} попыток!')
            return

        print("А нет, не угадал! ¯\_(ツ)_/¯")
        counter_game +=1
        print(f'Это ваша {counter_game + 1} попытка!')
             

# Создаем функцию в которой будут вызовы всех остальных функций и ввод данных.
def main():
    """Функция для вызова остальных функций. В зависимости того как будут введены данные - будет выводиться ошибка ввода данных с
       повторным запросом всех данных, либо приветсвенный текст. При выводе приветственного текста программа предложит сыграть в игру 
       'Угадай число' в которой так же будет указано количество попыток с момента начала игры и общего количества попыток потраченных 
       на завершение игры (отгадывания числа)."""

    # Счетчик попыток ввода данных
    counter = 0
    start_time = datetime.utcnow()
    
    # Вызов метода validate с класса Validator
    module = Validator()

    while True:

        # Запрос ввода данных от пользователя с индикацией попытки ввода дынных    
        name = input("Привет пользователь! Как мне к вам обращаться ? ")
        age = input("Сколько тебе лет ? ")

        # Обработка введенных данных возраста в случае ввода не цифр
        try:
            time = DataWithDate(name, age)   
                    
        except ValueError as e:
            print(f'"Это ошибка ввода данных {e}. Нужно вводить числа!')
            counter += 1
            print(f'Это ваша {counter + 1} попытка!')
            continue

        # Обработка введенных данных на ошибки    
        try:
            erorr_text = module.validate(time)

            name = erorr_text[0]
            age = erorr_text[1]
                
        except ValidationError as e:
            print(f'Ой я словил ошибку: {e}')
            counter += 1
            print(f'Это ваша {counter + 1} попытка!')
            continue

        # Вывод приветственного сообщения при корректном вводе данных
        result_text = f'Ваше имя {name.title()}. Ваш возраст {age}. Приятно познакомиться!'

        # Время последней попытки
        finally_time = datetime.utcnow()

        # Время потраченное на корректное введение данных
        total_time = finally_time - start_time
       
        # Проверка ввыдачи/замены паспорта. Так же будет отображаться в приветсвенном сообщении в соответствии с возрастом.
        passport_advace_text = get_passport_advice(age)
        if passport_advace_text:
            result_text += passport_advace_text
       
        print(result_text)
        print(f'Вы потратили {counter + 1} попыток что бы корректно ввести имя и возраст!')
        print('Ваше время первой попытки:', start_time.strftime('%X'))
        print('Ваше время последней попытки:', finally_time.strftime('%X'))
        print('Для ввода корректных данных вам понадобилось:', str(total_time).split('.', 2)[0]) 
        print(guess_number_game())
        break         
main()